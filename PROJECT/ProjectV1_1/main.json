{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1272.37030",
      "templateHash": "16579606768065544237"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "westeurope"
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "ZenTIA"
    },
    "adminUsername1": {
      "type": "string",
      "defaultValue": "jamaltadrous"
    },
    "adminPassword1": {
      "type": "string",
      "defaultValue": "T3chgr0und$"
    },
    "adminUsername2": {
      "type": "string",
      "defaultValue": "jamaltadrous"
    },
    "adminPassword2": {
      "type": "string",
      "defaultValue": "T3chgr0und$",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "[format('ZenTIA{0}', toLower(utcNow()))]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[parameters('resourceGroupName')]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1272.37030",
              "templateHash": "2521548648458430310"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "westeurope"
            }
          },
          "variables": {
            "resourceGroupName": "ZenTia"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[variables('resourceGroupName')]",
              "location": "[parameters('location')]"
            }
          ],
          "outputs": {
            "resoGroup": {
              "type": "string",
              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[variables('resourceGroupName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "zentiastoragev1",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "KeyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('keyVaultName'))).outputs.KEYVAULTName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1272.37030",
              "templateHash": "11861124349071928787"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "KeyVaultName": {
              "type": "string"
            },
            "containerName": {
              "type": "string",
              "defaultValue": "webcontainerzentia"
            },
            "utcValue": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "UTC timestamp used to create distinct deployment scripts for each deployment"
              }
            },
            "filename": {
              "type": "string",
              "defaultValue": "webserver.sh"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-08-01",
              "name": "zentiastoragev1",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'ZenTIAadmin'))]": {}
                }
              },
              "properties": {
                "minimumTlsVersion": "TLS1_2",
                "accessTier": "Hot",
                "allowSharedKeyAccess": true,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "virtualNetworkRules": [],
                  "ipRules": [],
                  "defaultAction": "Allow"
                },
                "encryption": {
                  "identity": {
                    "userAssignedIdentity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'ZenTIAadmin')]"
                  },
                  "keySource": "Microsoft.Keyvault",
                  "keyvaultproperties": {
                    "keyvaulturi": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('KeyVaultName')), '2019-09-01').vaultUri]",
                    "keyname": "RSAKey"
                  },
                  "services": {
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "table": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "queue": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', 'zentiastoragev1', 'default')]",
              "properties": {
                "containerDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 30
                },
                "deleteRetentionPolicy": {
                  "enabled": true,
                  "days": 30
                },
                "automaticSnapshotPolicyEnabled": true,
                "isVersioningEnabled": true,
                "restorePolicy": {
                  "enabled": true,
                  "days": 7
                },
                "changeFeed": {
                  "enabled": true,
                  "retentionInDays": 14
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', 'zentiastoragev1')]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2019-06-01",
              "name": "[format('{0}/{1}/{2}', 'zentiastoragev1', 'default', parameters('containerName'))]",
              "properties": {
                "publicAccess": "Container"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', 'zentiastoragev1')]",
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', 'zentiastoragev1', 'default')]"
              ]
            },
            {
              "type": "Microsoft.Compute/disks",
              "apiVersion": "2021-08-01",
              "name": "StorageDisc",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "properties": {
                "creationData": {
                  "createOption": "Empty"
                },
                "encryption": {
                  "type": "EncryptionAtRestWithCustomerKey",
                  "diskEncryptionSetId": "[resourceId('Microsoft.Compute/diskEncryptionSets', 'dskEncrKeyV1')]"
                },
                "diskSizeGB": 4,
                "networkAccessPolicy": "AllowPrivate",
                "publicNetworkAccess": "Enabled",
                "diskAccessId": "[resourceId('Microsoft.Compute/diskAccesses', 'diskAccess')]",
                "osType": "Linux"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/diskAccesses', 'diskAccess')]"
              ]
            },
            {
              "type": "Microsoft.Compute/diskAccesses",
              "apiVersion": "2021-12-01",
              "name": "diskAccess",
              "location": "[parameters('location')]",
              "tags": {
                "ZenTia": "jamaltadrous"
              }
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[format('deployscript{0}', parameters('utcValue'))]",
              "tags": {
                "ZenTia": "jamaltadrous"
              },
              "location": "[parameters('location')]",
              "kind": "AzureCLI",
              "properties": {
                "azCliVersion": "2.26.1",
                "timeout": "PT5M",
                "retentionInterval": "PT1H",
                "environmentVariables": [
                  {
                    "name": "AZURE_STORAGE_ACCOUNT",
                    "value": "zentiastoragev1"
                  },
                  {
                    "name": "AZURE_STORAGE_KEY",
                    "secureValue": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', 'zentiastoragev1'), '2021-08-01').keys[0].value]"
                  },
                  {
                    "name": "CONTENT",
                    "value": "IyEvYmluL2Jhc2gNCnN1ZG8gc3UNCmFwdCB1cGRhdGUNCmFwdCBpbnN0YWxsIGFwYWNoZTIgLXkNCnVmdyBhbGxvdyAnQXBhY2hlJw0Kc3lzdGVtY3RsIGVuYWJsZSBhcGFjaGUyDQpzeXN0ZW1jdGwgcmVzdGFydCBhcGFjaGUy"
                  }
                ],
                "scriptContent": "[format('echo $CONTENT | base64 -d > {0} && az storage blob upload -f {1} -c {2} -n {3}', parameters('filename'), parameters('filename'), parameters('containerName'), parameters('filename'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', 'zentiastoragev1')]"
              ]
            }
          ],
          "outputs": {
            "disc": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/disks', 'StorageDisc')]"
            },
            "stgName": {
              "type": "string",
              "value": "zentiastoragev1"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('keyVaultName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "ADMINSERVER",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminUsername1": {
            "value": "[parameters('adminUsername1')]"
          },
          "adminPassword1": {
            "value": "[parameters('adminPassword1')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1272.37030",
              "templateHash": "11863029249787188293"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "adminvmName": {
              "type": "string",
              "defaultValue": "adminserv"
            },
            "adminUsername1": {
              "type": "string"
            },
            "adminPassword1": {
              "type": "secureString",
              "minLength": 6,
              "metadata": {
                "description": "Password for the Virtual Machine."
              }
            },
            "OSVersion": {
              "type": "string",
              "defaultValue": "2019-Datacenter"
            },
            "vmSize1": {
              "type": "string",
              "defaultValue": "Standard_B1s"
            },
            "dnsLabelPrefix1": {
              "type": "string",
              "defaultValue": "[toLower(format('adminManage-vm-{0}', uniqueString(resourceGroup().id)))]"
            },
            "vnet1Name": {
              "type": "string",
              "defaultValue": "management-prd-vnet"
            },
            "nicName1": {
              "type": "string",
              "defaultValue": "adminnic"
            },
            "sourceAddressPrefix": {
              "type": "string",
              "defaultValue": "84.83.9.144"
            }
          },
          "variables": {
            "vnet1Config": {
              "addressSpacePrefix": "10.10.0.0/24",
              "subnetName": "admsubnet",
              "subnetPrefix": "10.10.0.0/27"
            },
            "nsgName": "adminNSG",
            "publicIPAddressName": "AdminPublicIP"
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2021-05-01",
              "name": "[parameters('vnet1Name')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[variables('vnet1Config').addressSpacePrefix]"
                  ]
                },
                "subnets": [
                  {
                    "name": "[variables('vnet1Config').subnetName]",
                    "properties": {
                      "addressPrefix": "[variables('vnet1Config').subnetPrefix]"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}/{1}', parameters('vnet1Name'), variables('vnet1Config').subnetName)]",
              "properties": {
                "addressPrefix": "[variables('vnet1Config').subnetPrefix]",
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                },
                "serviceEndpoints": [
                  {
                    "service": "Microsoft.KeyVault"
                  },
                  {
                    "service": "Microsoft.Storage"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnet1Name'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2021-02-01",
              "name": "[parameters('nicName1')]",
              "location": "[parameters('location')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
                      },
                      "subnet": {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnet1Name'), variables('vnet1Config').subnetName)]"
                      }
                    }
                  }
                ],
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnet1Name'), variables('vnet1Config').subnetName)]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-06-01",
              "name": "[variables('nsgName')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "SSH",
                    "properties": {
                      "priority": 1000,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "[parameters('sourceAddressPrefix')]",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "22"
                    }
                  },
                  {
                    "name": "RDP",
                    "properties": {
                      "description": "rdp-rule",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "3389",
                      "sourceAddressPrefix": "[parameters('sourceAddressPrefix')]",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 300,
                      "direction": "Inbound"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2020-06-01",
              "name": "[variables('publicIPAddressName')]",
              "location": "[parameters('location')]",
              "zones": [
                "1"
              ],
              "sku": {
                "name": "Basic"
              },
              "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4",
                "dnsSettings": {
                  "domainNameLabel": "[parameters('dnsLabelPrefix1')]"
                },
                "idleTimeoutInMinutes": 4
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2021-03-01",
              "name": "[parameters('adminvmName')]",
              "location": "[parameters('location')]",
              "zones": [
                "1"
              ],
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize1')]"
                },
                "osProfile": {
                  "computerName": "[parameters('adminvmName')]",
                  "adminUsername": "[parameters('adminUsername1')]",
                  "adminPassword": "[parameters('adminPassword1')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "MicrosoftWindowsServer",
                    "offer": "WindowsServer",
                    "sku": "[parameters('OSVersion')]",
                    "version": "latest"
                  },
                  "osDisk": {
                    "name": "adminvmstorage",
                    "createOption": "FromImage",
                    "managedDisk": {
                      "storageAccountType": "StandardSSD_LRS",
                      "diskEncryptionSet": {
                        "id": "[resourceId('Microsoft.Compute/diskEncryptionSets', 'dskEncrKeyV1')]"
                      }
                    }
                  }
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('nicName1'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('nicName1'))]"
              ]
            }
          ],
          "outputs": {
            "admVmId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('adminvmName'))]"
            },
            "admVmName": {
              "type": "string",
              "value": "[parameters('adminvmName')]"
            },
            "hostname": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))).dnsSettings.fqdn]"
            },
            "nic1": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('nicName1'))]"
            },
            "nsg1": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
            },
            "vnet1Name": {
              "type": "string",
              "value": "[parameters('vnet1Name')]"
            },
            "admsubId1": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnet1Name'), variables('vnet1Config').subnetName)]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('keyVaultName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'zentiastoragev1')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "WEBSERVER",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "adminUsername2": {
            "value": "[parameters('adminUsername2')]"
          },
          "adminPassword2": {
            "value": "[parameters('adminPassword2')]"
          },
          "dskEncrKey": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('keyVaultName'))).outputs.dskEncrKey.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1272.37030",
              "templateHash": "2652881717761670363"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "virtualNetworkName": {
              "type": "string",
              "defaultValue": "app-prod-vnet"
            },
            "vnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.20.0.0/16"
            },
            "subnetName1": {
              "type": "string",
              "defaultValue": "WebSubnet"
            },
            "subnetPrefix1": {
              "type": "string",
              "defaultValue": "10.20.40.0/27"
            },
            "subnetName2": {
              "type": "string",
              "defaultValue": "AppGWSubnet"
            },
            "subnetPrefix2": {
              "type": "string",
              "defaultValue": "10.20.0.0/27"
            },
            "nsgName": {
              "type": "string",
              "defaultValue": "webNSG"
            },
            "applicationGatewayName": {
              "type": "string",
              "defaultValue": "webAppGW"
            },
            "minCapacity": {
              "type": "int",
              "defaultValue": 1
            },
            "maxCapacity": {
              "type": "int",
              "defaultValue": 3
            },
            "backendIPAddresses": {
              "type": "array",
              "defaultValue": [
                {
                  "IpAddress": "10.20.20.4"
                },
                {
                  "IpAddress": "10.20.20.5"
                }
              ]
            },
            "sourceAddressPrefix": {
              "type": "string",
              "defaultValue": "84.83.9.144"
            },
            "stgName": {
              "type": "string",
              "defaultValue": "zentiastoragev1"
            },
            "adminUsername2": {
              "type": "string"
            },
            "adminPassword2": {
              "type": "string"
            },
            "dskEncrKey": {
              "type": "string"
            },
            "WebVMssName": {
              "type": "string",
              "defaultValue": "WebVMss"
            },
            "computerNamePrefix": {
              "type": "string",
              "defaultValue": "WebVM"
            },
            "sslcert": {
              "type": "string",
              "defaultValue": "MIIKNgIBAzCCCfIGCSqGSIb3DQEHAaCCCeMEggnfMIIJ2zCCBhwGCSqGSIb3DQEHAaCCBg0EggYJMIIGBTCCBgEGCyqGSIb3DQEMCgECoIIE/jCCBPowHAYKKoZIhvcNAQwBAzAOBAhqEgwySQWcDwICB9AEggTYqP37hSGWa4ey9oRT8eqDl5xDgKH6p8tt10+7w32sqklYB53IxAH/mTvQwl8Eotoj/JdmIvUGK7kkJ63bCwGQ+EK+oJIa1t6SyupL0tfdQcDQtx5GnyMQMlywSMmBy1lZYXLu71fnSMNqPpeRnP/dzm8zoNb4A/FmiMa082BwQ8DuDgPCCsgXSecp9aTaObqEmWUO6VnL9n5byNOg8WlCnl0W694j/HRhLu9nRUBp87pbSP4KmnZvv6tilgLJlYN0RGo0ZHE8O9+R+JY5DKEeZcCi2ydxPJUlVLfYtVImlpKynUNlv/UrgoCLrcfDhEDHqK7tHqtOPDH5aEuRd6H4HSwa/NdeS65zz5fDUpjkRRGkyxCiMKgpmJ4s5z+JY/0ingiOQWOVZgXyouiI3IH2Rk91LFZifMAVbHHRtgOFHqCqhjXANOqTCbDY3HqSgpYP5bAhJhGbYDlQNArpCqn4ouJ9tEnspBbSBD9E/jV1X0BxrgYtafHFbVMDki5fNzniHdpg4t8h1MkafAYg161WWIEp6HfAFM9oS07mUiRILn2r/JRo9gsGdO2N30ccYgF/9AqXZWlZUhpDyqYcCq2fLpJUSyqbIhSn10RJewpMl5izyELPQ/C/gxYGRa2ldk6ESA4KVxV/OF4bb+ADRJ2f0hEnOfFZhzu56TI/27BPd2rVbJOmrKyhUvKm5mokfHqjOjM6f8EbkPEuaISkkCFZizEIWSibioSgAYL3C9Ziui3DpWLKLKh4kHQBRoLhshDFT10J3o0pomNIvOBuMVzasnALhicUBxMyxITLoF7xroO4O0lPjJG11g5lgvuQ/qF9Wr9lmTvf/EZk4pOZRqQkbDy9aY+85BiNimz06mdMhqCQItl82NNE6bS+3C3lSATPKsdS0VewNnU9AY3aX2g90XOlJSQYAX4apIU0y9jKTRE9inoUZGOJd/KaEPHJdeF/hN2E3ONtyFwYIhPv8KRW7F1vvv4d0A93mxM97O3vCSorEIHED8DZ2iZPae5Hsov+XFAq6maYY4wWMy/Qd4Uy45v6aXsdT65sXJOlD40XSlpGPIrNKMtBnHmm+HxWAxQEsB14Gt7Q2rCMS1r8L6p0o5v8Z6Xa8e0aPpffVgITOtMnrkvVxHhKCFZ/U6ivKXnF0hIF7h3g6j4rFQR6ioyKB2cyWWW+7DO+22jRp2nbFtw+TFbA7NsPbtpZYfkZ4SPBmQw/wvq+GkBKTqyB3jkmUBBnK/fqLSgg6avue9xNk/m2d4I+z3WK6naK7gieGKxOUSRWu4UVFuTxmcNerY3AaGmSMMY15T8YqsRwoOd7JbScHrf/ElbZj9i8sNIb+nMukEWZHQqRvcaGB9TglmhM1WCPaNFU+jmSJzZQxbhhaytA7/pDKqYi9EeCLyjYHPMsTEcNbr3B5OlUvh9tk7236ruVqdn6F3elTbbRMcSmeZYlfM/LcEeo9DpIl4PCAFePnpeeLvFoNjOZFXW0tx0ykEOF2enZtVP2L2+B3jIiaNR5zsGgsciPKW2d4ijW+Vo6H1TBVyBVa6ALbJi8qTMoB4Evkkv8Ol6Sv2w9eStBGTTGFs8O0YdJ+NsXGr0F6npt3tD8SmxUXUk/6NWZZ07OzVhPVfRSnZTjVHMMWpbpnZQVgvwEurRaizGB7zATBgkqhkiG9w0BCRUxBgQEAQAAADBdBgkqhkiG9w0BCRQxUB5OAHQAZQAtADAANwA4ADcAOQAyADEAYwAtADkAOQA2ADQALQA0AGYAMQBhAC0AYgBmAGMAOAAtADcANgA4ADQAZABkADgAOQA4AGYAYwA4MHkGCSsGAQQBgjcRATFsHmoATQBpAGMAcgBvAHMAbwBmAHQAIABFAG4AaABhAG4AYwBlAGQAIABSAFMAQQAgAGEAbgBkACAAQQBFAFMAIABDAHIAeQBwAHQAbwBnAHIAYQBwAGgAaQBjACAAUAByAG8AdgBpAGQAZQByMIIDtwYJKoZIhvcNAQcGoIIDqDCCA6QCAQAwggOdBgkqhkiG9w0BBwEwHAYKKoZIhvcNAQwBAzAOBAgD+F7+BRRE6QICB9CAggNwEV07S2LSTosWzxBAr5VYT1uZg9rkzsvfEXLK24q/q6bmeKb99kKsf3ZCesUPXxz7OB+SCQpMMigiVzX45VRBH6X6V74g3s66h1uBUHQVD0GBr1Ibu9DsXDtjkUHckcKcsIBlMGmZBp1+1rJ1/FwQpsGJqcWvfbWeeVTuHLiJHOpJ8ECt/idrLTTme2BP/waSkIqZ9kCbv6DyOOWLSrsicgHMobkpH2OfW/WO2uIG+6shaJ4NWQjDTejUAcIEA4bw+5Rpa2KsQq1s6HyrZp/0s93YPw/6G0R9wwwRujZBJOrlp07huJ2jixI6cC9ed0XImrjkrQpw8P2J2Be+EhXYdbZMcAM2GPVXKuCfXMNMZlQVT+iKuY/FDOE4ZpwvAcVWhiSomoG1kEfX+a/5yzBap5Zg4HQO88tPDcX4JRtCnq2K7WiMdJatFlXPOU+VVQva91ZUm2DOBhmAFTo6R0jlLOMRD/veCCZtmmlUtsvpYOkZXIGvfSTTLPiPGRuMC7Z8I1L214eGG1+Tg2WA8x13KJ+sirspVL/TWfGEZQRZ4M6uZYZBdh2QQySHXqBKKh9HcdEKNL0OZ/5yxRRApImKDgQKHnyvNPTpFYIC2Cgli5YhamAELOSz6murySM9oRAdHVw9viPDcAqcY+9VnEK6Pe5pRc9PN72whAIvwEL3UaPj9Rb5ziQmRDJK2fy64FVEZrOwQ9eI51ogCs3aSff81SOcXhM6GkRpMyT5nkukwJE+JRc0NVFsugAjQ9HzM/DYnjnp7CYPLTtDZqrq65p8oJ6M5WUdzCqF9B0qAJccJxd5yXBp8GDayKpNhZUoEEnZ+GHjFrQwkLZ8mUqzZX5RKN+N02QUaFA212tbpQg7IkStibhsA//dliiG5YSXnKidJUXDq9Z22TzlfGpNPTt4ayZTjHKDpTozppd10J0jSaGPbFzHAfdn/98eIlb7Gfx2Q+uH5ojUE0pJ3naqmfy1cl7qmMhv9GoS2nyeojtooGrKLA4OdzNtXdmRUASKzDz5kce8rmiYfdP9CMO6fzLCxqSMUuVV/M6DrttuBOIiDTh7SS+QBav644nFxdgV7GntzV7oEQGJCqha/eyH172yARK45V4u3TbMdVx5uD0zdTlr0+HL4DyuRA0C27BmVlLwKuFbzfTv1zecFdEcSfeJQDA7MB8wBwYFKw4DAhoEFCixHwVh3Cwou6SN8p54LV1SKip/BBRtJIn68wbTL/3HXEq3WZbUmUgCsAICB9A="
            }
          },
          "variables": {
            "appGwSize": "Standard_v2",
            "appGwPublicIpName": "[format('{0}-pip', parameters('applicationGatewayName'))]",
            "nicname": "[format('{0}nic', parameters('WebVMssName'))]",
            "ipConfigName": "[format('{0}ipconfig', parameters('WebVMssName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2021-05-01",
              "name": "[parameters('virtualNetworkName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('vnetAddressPrefix')]"
                  ]
                },
                "subnets": [
                  {
                    "name": "[parameters('subnetName1')]",
                    "properties": {
                      "addressPrefix": "[parameters('subnetPrefix1')]"
                    }
                  },
                  {
                    "name": "[parameters('subnetName2')]",
                    "properties": {
                      "addressPrefix": "[parameters('subnetPrefix2')]"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('subnetName1'))]",
              "properties": {
                "addressPrefix": "[parameters('subnetPrefix1')]",
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
                },
                "serviceEndpoints": [
                  {
                    "service": "Microsoft.KeyVault"
                  },
                  {
                    "service": "Microsoft.Storage"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('subnetName2'))]",
              "properties": {
                "addressPrefix": "[parameters('subnetPrefix2')]",
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
                },
                "serviceEndpoints": [
                  {
                    "service": "Microsoft.KeyVault"
                  },
                  {
                    "service": "Microsoft.Storage"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2021-05-01",
              "name": "[parameters('nsgName')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "HTTPin",
                    "properties": {
                      "description": "HTTP-rule",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "80",
                      "sourceAddressPrefix": "Internet",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 100,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "HTTPSin",
                    "properties": {
                      "description": "HTTPS-rule",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "Internet",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 120,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "sshin",
                    "properties": {
                      "description": "ssh-rule",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "22",
                      "sourceAddressPrefix": "[parameters('sourceAddressPrefix')]",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 160,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "GatewayManager",
                    "properties": {
                      "description": "GatewayManager",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "65200-65535",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 180,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "sshout",
                    "properties": {
                      "description": "ssh-rule",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "22",
                      "sourceAddressPrefix": "[parameters('sourceAddressPrefix')]",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 200,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "HTTPSout",
                    "properties": {
                      "description": "HTTPS-rule",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "Internet",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 220,
                      "direction": "Outbound"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2021-05-01",
              "name": "[variables('appGwPublicIpName')]",
              "location": "[parameters('location')]",
              "zones": [
                "2"
              ],
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static",
                "idleTimeoutInMinutes": 4
              }
            },
            {
              "type": "Microsoft.Network/applicationGateways",
              "apiVersion": "2021-05-01",
              "name": "[parameters('applicationGatewayName')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "name": "[variables('appGwSize')]",
                  "tier": "[variables('appGwSize')]"
                },
                "autoscaleConfiguration": {
                  "minCapacity": "[parameters('minCapacity')]",
                  "maxCapacity": "[parameters('maxCapacity')]"
                },
                "gatewayIPConfigurations": [
                  {
                    "name": "appGatewayIpConfig",
                    "properties": {
                      "subnet": {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName2'))]"
                      }
                    }
                  }
                ],
                "probes": [
                  {
                    "name": "healthprobe80",
                    "properties": {
                      "protocol": "Http",
                      "host": "127.0.0.1",
                      "path": "/",
                      "interval": 60,
                      "timeout": 60,
                      "unhealthyThreshold": 10
                    }
                  },
                  {
                    "name": "healthprobe443",
                    "properties": {
                      "protocol": "Https",
                      "host": "127.0.0.1",
                      "path": "/",
                      "interval": 60,
                      "timeout": 60,
                      "unhealthyThreshold": 10
                    }
                  }
                ],
                "sslCertificates": [
                  {
                    "name": "[format('{0}SslCert', parameters('applicationGatewayName'))]",
                    "properties": {
                      "data": "[parameters('sslcert')]",
                      "password": "Passw0rd!"
                    }
                  }
                ],
                "sslPolicy": {
                  "policyType": "Custom",
                  "minProtocolVersion": "TLSv1_2",
                  "cipherSuites": [
                    "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA",
                    "TLS_DHE_DSS_WITH_AES_128_CBC_SHA",
                    "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256",
                    "TLS_DHE_DSS_WITH_AES_256_CBC_SHA",
                    "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256",
                    "TLS_DHE_RSA_WITH_AES_128_CBC_SHA",
                    "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
                    "TLS_DHE_RSA_WITH_AES_256_CBC_SHA",
                    "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
                    "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
                    "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
                    "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
                    "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
                    "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
                    "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
                    "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
                    "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
                    "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
                    "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
                    "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
                    "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                    "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
                    "TLS_RSA_WITH_AES_128_CBC_SHA",
                    "TLS_RSA_WITH_AES_128_CBC_SHA256",
                    "TLS_RSA_WITH_AES_128_GCM_SHA256",
                    "TLS_RSA_WITH_AES_256_CBC_SHA",
                    "TLS_RSA_WITH_AES_256_CBC_SHA256",
                    "TLS_RSA_WITH_AES_256_GCM_SHA384"
                  ]
                },
                "frontendIPConfigurations": [
                  {
                    "name": "appGatewayFrontendIP",
                    "properties": {
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('appGwPublicIpName'))]"
                      }
                    }
                  }
                ],
                "frontendPorts": [
                  {
                    "name": "FrontEndhttpPort80",
                    "properties": {
                      "port": 80
                    }
                  },
                  {
                    "name": "FrontEndhttpsPort443",
                    "properties": {
                      "port": 443
                    }
                  }
                ],
                "backendAddressPools": [
                  {
                    "name": "appGatewayBackendPool",
                    "properties": {
                      "backendAddresses": "[parameters('backendIPAddresses')]"
                    }
                  }
                ],
                "backendHttpSettingsCollection": [
                  {
                    "name": "HTTPBackEnd",
                    "properties": {
                      "port": 80,
                      "protocol": "Http",
                      "cookieBasedAffinity": "Disabled",
                      "probeEnabled": true,
                      "probe": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/probes', parameters('applicationGatewayName'), 'healthprobe80')]"
                      }
                    }
                  },
                  {
                    "name": "HTTPsBackEnd",
                    "properties": {
                      "port": 443,
                      "protocol": "Https",
                      "cookieBasedAffinity": "Disabled",
                      "probeEnabled": true,
                      "probe": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/probes', parameters('applicationGatewayName'), 'healthprobe443')]"
                      }
                    }
                  }
                ],
                "httpListeners": [
                  {
                    "name": "HttpListener",
                    "properties": {
                      "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations/', parameters('applicationGatewayName'), 'appGatewayFrontendIP')]"
                      },
                      "frontendPort": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts/', parameters('applicationGatewayName'), 'FrontEndhttpPort80')]"
                      },
                      "protocol": "Http"
                    }
                  },
                  {
                    "name": "HttpsListener",
                    "properties": {
                      "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations/', parameters('applicationGatewayName'), 'appGatewayFrontendIP')]"
                      },
                      "frontendPort": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts/', parameters('applicationGatewayName'), 'FrontEndhttpsPort443')]"
                      },
                      "protocol": "Https",
                      "sslCertificate": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/sslCertificates/', parameters('applicationGatewayName'), format('{0}SslCert', parameters('applicationGatewayName')))]"
                      }
                    }
                  }
                ],
                "requestRoutingRules": [
                  {
                    "name": "httpPort80rule",
                    "properties": {
                      "ruleType": "Basic",
                      "httpListener": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), 'HttpListener')]"
                      },
                      "redirectConfiguration": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/redirectConfigurations/', parameters('applicationGatewayName'), 'httpToHttps')]"
                      }
                    }
                  },
                  {
                    "name": "httpsPort443rule",
                    "properties": {
                      "ruleType": "Basic",
                      "httpListener": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), 'HttpsListener')]"
                      },
                      "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), 'appGatewayBackendPool')]"
                      },
                      "backendHttpSettings": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), 'HTTPBackEnd')]"
                      }
                    }
                  }
                ],
                "redirectConfigurations": [
                  {
                    "name": "httpToHttps",
                    "properties": {
                      "redirectType": "Permanent",
                      "targetListener": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners/', parameters('applicationGatewayName'), 'HttpsListener')]"
                      },
                      "includePath": true,
                      "includeQueryString": true,
                      "requestRoutingRules": [
                        {
                          "id": "[resourceId('Microsoft.Network/applicationGateways/requestRoutingRules/', parameters('applicationGatewayName'), 'httpPort80rule')]"
                        }
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('appGwPublicIpName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachineScaleSets",
              "apiVersion": "2021-11-01",
              "name": "[parameters('WebVMssName')]",
              "location": "[parameters('location')]",
              "zones": [
                "2"
              ],
              "sku": {
                "name": "Standard_B1s",
                "tier": "Standard"
              },
              "properties": {
                "virtualMachineProfile": {
                  "osProfile": {
                    "computerNamePrefix": "[parameters('computerNamePrefix')]",
                    "adminUsername": "[parameters('adminUsername2')]",
                    "adminPassword": "[parameters('adminPassword2')]",
                    "customData": "IyEvYmluL2Jhc2gNCnN1ZG8gc3UNCmFwdCB1cGRhdGUNCmFwdCBpbnN0YWxsIGFwYWNoZTIgLXkNCnVmdyBhbGxvdyAnQXBhY2hlJw0Kc3lzdGVtY3RsIGVuYWJsZSBhcGFjaGUyDQpzeXN0ZW1jdGwgcmVzdGFydCBhcGFjaGUy",
                    "linuxConfiguration": {
                      "disablePasswordAuthentication": true,
                      "ssh": {
                        "publicKeys": [
                          {
                            "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername2'))]",
                            "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDHrftoPH1aSo0ETKHFKXFgHObJ94e6VTyNn+Nq2NYrs18td4fsD8o6FiL7Tyn16imHdTqt1hkRET+Egix+ftBPtYGGnMEDkTen8NCfMsvBPlAzIdgC5BzlamiewFouZDwIdVqcVunkMgCPPjh0kG3D7xz5VBHyyxM+gaRwniCl1ZX5T0K2g0WS/n/CfVikBj54UXveKewa7hsuFQ9X5qIy/sdfOqI/z3n3gpfYdnADuaUO4bO5McJUiz0m+tb8r4C/h+S4V8AJdaAQaKwB7SYGw33YrbCT9Bp5HtxBGgTmXXBdD9S2L8Z1P+6AXiswWXuD3qHcrXS/FZGHd9+x9vxdpknAMNv0CgDVYR9YC9f+gy1F7hFTrq6q2rlZHkZymkaHgp0iMIx4Fh9zilwJyPKviYgo6DaW9GAe+eQFysTMJHoKocPX4sSguZSqAHqBGV6OkCUHYZWUSnQ3sQDp1vZCwLK3vgL7VvWD9WpKbUiUGBX8kAr3kvGo59Ah5+HAAM0PWqkfPdvf8r6X0TsyB8DEKUKpsnmZiD15d9i+eI4i96d+MTs3NMTCP3G02snYDcmsC4rHdBuN3whVZ631pdlkLq3rHbkvO6BdONPsrC7dXSd9jLtkhNYR3QP7n357dMrWUjeERy2DyE+OYvdTKEnhiSeKTvr7/zuxHJuAu+r0Mw== \r\n"
                          }
                        ]
                      }
                    }
                  },
                  "storageProfile": {
                    "osDisk": {
                      "createOption": "FromImage",
                      "caching": "ReadWrite",
                      "managedDisk": {
                        "storageAccountType": "StandardSSD_LRS",
                        "diskEncryptionSet": {
                          "id": "[parameters('dskEncrKey')]"
                        }
                      }
                    },
                    "imageReference": {
                      "publisher": "Canonical",
                      "offer": "UbuntuServer",
                      "sku": "18.04-LTS",
                      "version": "latest"
                    }
                  },
                  "extensionProfile": {
                    "extensions": [
                      {
                        "name": "HealthExtension",
                        "properties": {
                          "autoUpgradeMinorVersion": true,
                          "publisher": "Microsoft.ManagedServices",
                          "type": "ApplicationHealthLinux",
                          "typeHandlerVersion": "1.0",
                          "settings": {
                            "protocol": "http",
                            "port": 80,
                            "requestPath": "/"
                          }
                        }
                      }
                    ]
                  },
                  "networkProfile": {
                    "networkInterfaceConfigurations": [
                      {
                        "name": "[variables('nicname')]",
                        "properties": {
                          "primary": true,
                          "ipConfigurations": [
                            {
                              "name": "[variables('ipConfigName')]",
                              "properties": {
                                "subnet": {
                                  "id": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), parameters('subnetName1'))]"
                                },
                                "primary": true,
                                "applicationGatewayBackendAddressPools": [
                                  {
                                    "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), 'appGatewayBackendPool')]"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                "overprovision": true,
                "upgradePolicy": {
                  "mode": "Automatic"
                },
                "orchestrationMode": "Uniform",
                "scaleInPolicy": {
                  "rules": [
                    "OldestVM"
                  ]
                },
                "automaticRepairsPolicy": {
                  "enabled": true,
                  "gracePeriod": "PT10M"
                },
                "platformFaultDomainCount": 1
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/autoscalesettings",
              "apiVersion": "2015-04-01",
              "name": "cpuautoscale",
              "location": "[parameters('location')]",
              "properties": {
                "name": "cpuautoscale",
                "targetResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('WebVMssName'))]",
                "enabled": true,
                "profiles": [
                  {
                    "name": "vmScaleSettings",
                    "capacity": {
                      "minimum": "1",
                      "maximum": "3",
                      "default": "1"
                    },
                    "rules": [
                      {
                        "metricTrigger": {
                          "metricName": "Percentage CPU",
                          "metricNamespace": "",
                          "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('WebVMssName'))]",
                          "timeGrain": "PT1M",
                          "timeWindow": "PT5M",
                          "timeAggregation": "Average",
                          "operator": "GreaterThan",
                          "threshold": 70,
                          "statistic": "Average"
                        },
                        "scaleAction": {
                          "direction": "Increase",
                          "type": "ChangeCount",
                          "value": "1",
                          "cooldown": "PT5M"
                        }
                      },
                      {
                        "metricTrigger": {
                          "metricName": "Percentage CPU",
                          "metricNamespace": "",
                          "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('WebVMssName'))]",
                          "timeGrain": "PT1M",
                          "timeWindow": "PT5M",
                          "timeAggregation": "Average",
                          "operator": "LessThan",
                          "threshold": 30,
                          "statistic": "Average"
                        },
                        "scaleAction": {
                          "direction": "Decrease",
                          "type": "ChangeCount",
                          "value": "1",
                          "cooldown": "PT5M"
                        }
                      },
                      {
                        "scaleAction": {
                          "cooldown": "PT5M",
                          "direction": "Increase",
                          "type": "ChangeCount",
                          "value": "1"
                        },
                        "metricTrigger": {
                          "metricName": "CurrentConnections",
                          "metricResourceUri": "[resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName'))]",
                          "operator": "GreaterThan",
                          "statistic": "Sum",
                          "threshold": 2500,
                          "timeAggregation": "Average",
                          "timeGrain": "PT1M",
                          "timeWindow": "PT5M",
                          "dividePerInstance": true
                        }
                      },
                      {
                        "scaleAction": {
                          "cooldown": "PT5M",
                          "direction": "Decrease",
                          "type": "ChangeCount",
                          "value": "1"
                        },
                        "metricTrigger": {
                          "metricName": "CurrentConnections",
                          "metricResourceUri": "[resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName'))]",
                          "operator": "LessThanOrEqual",
                          "statistic": "Sum",
                          "threshold": 2500,
                          "timeAggregation": "Average",
                          "timeGrain": "PT1M",
                          "timeWindow": "PT10M",
                          "dividePerInstance": true
                        }
                      }
                    ]
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName'))]",
                "[resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('WebVMssName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', parameters('keyVaultName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'zentiastoragev1')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "VNETpeering",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1272.37030",
              "templateHash": "9411015782119702785"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2020-05-01",
              "name": "[format('{0}/{1}', 'management-prd-vnet', format('{0}-{1}', 'management-prd-vnet', 'app-prod-vnet'))]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": true,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', 'app-prod-vnet')]"
                }
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2020-05-01",
              "name": "[format('{0}/{1}', 'app-prod-vnet', format('{0}-{1}', 'app-prod-vnet', 'management-prd-vnet'))]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": true,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', 'management-prd-vnet')]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'ADMINSERVER')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'WEBSERVER')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[parameters('keyVaultName')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1272.37030",
              "templateHash": "8349700274262503120"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": "[format('ZenTIA{0}', toLower(utcNow()))]"
            },
            "enabledForDeployment": {
              "type": "bool",
              "defaultValue": true
            },
            "enabledForTemplateDeployment": {
              "type": "bool",
              "defaultValue": true
            },
            "enabledForDiskEncryption": {
              "type": "bool",
              "defaultValue": true
            },
            "enableSoftDelete": {
              "type": "bool",
              "defaultValue": true
            },
            "enablePurgeProtection": {
              "type": "bool",
              "defaultValue": true
            },
            "enableRbacAuthorization": {
              "type": "bool",
              "defaultValue": false
            },
            "tenantId": {
              "type": "string",
              "defaultValue": "[subscription().tenantId]"
            },
            "objectId": {
              "type": "string",
              "defaultValue": "214bb771-fd30-4f8e-9dfc-7195f7b165ff",
              "metadata": {
                "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2019-09-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "tags": {
                "ZenTIA": "jamaltadrous"
              },
              "properties": {
                "enabledForDeployment": "[parameters('enabledForDeployment')]",
                "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
                "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                "tenantId": "[parameters('tenantId')]",
                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                "enablePurgeProtection": "[parameters('enablePurgeProtection')]",
                "softDeleteRetentionInDays": 7,
                "accessPolicies": [
                  {
                    "objectId": "[parameters('objectId')]",
                    "tenantId": "[parameters('tenantId')]",
                    "permissions": {
                      "keys": [
                        "all"
                      ],
                      "secrets": [
                        "all"
                      ],
                      "certificates": [
                        "all"
                      ],
                      "storage": [
                        "all"
                      ]
                    }
                  }
                ],
                "sku": {
                  "name": "standard",
                  "family": "A"
                },
                "networkAcls": {
                  "defaultAction": "Allow",
                  "bypass": "AzureServices"
                }
              }
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "ZenTIAadmin",
              "location": "[parameters('location')]",
              "tags": {
                "ZenTIA": "jamaltadrous"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-10-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'ssh')]",
              "properties": {
                "value": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDHrftoPH1aSo0ETKHFKXFgHObJ94e6VTyNn+Nq2NYrs18td4fsD8o6FiL7Tyn16imHdTqt1hkRET+Egix+ftBPtYGGnMEDkTen8NCfMsvBPlAzIdgC5BzlamiewFouZDwIdVqcVunkMgCPPjh0kG3D7xz5VBHyyxM+gaRwniCl1ZX5T0K2g0WS/n/CfVikBj54UXveKewa7hsuFQ9X5qIy/sdfOqI/z3n3gpfYdnADuaUO4bO5McJUiz0m+tb8r4C/h+S4V8AJdaAQaKwB7SYGw33YrbCT9Bp5HtxBGgTmXXBdD9S2L8Z1P+6AXiswWXuD3qHcrXS/FZGHd9+x9vxdpknAMNv0CgDVYR9YC9f+gy1F7hFTrq6q2rlZHkZymkaHgp0iMIx4Fh9zilwJyPKviYgo6DaW9GAe+eQFysTMJHoKocPX4sSguZSqAHqBGV6OkCUHYZWUSnQ3sQDp1vZCwLK3vgL7VvWD9WpKbUiUGBX8kAr3kvGo59Ah5+HAAM0PWqkfPdvf8r6X0TsyB8DEKUKpsnmZiD15d9i+eI4i96d+MTs3NMTCP3G02snYDcmsC4rHdBuN3whVZ631pdlkLq3rHbkvO6BdONPsrC7dXSd9jLtkhNYR3QP7n357dMrWUjeERy2DyE+OYvdTKEnhiSeKTvr7/zuxHJuAu+r0Mw== \r\n"
              },
              "tags": {
                "ZenTIA": "jamaltadrous"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2021-10-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'RSAKey')]",
              "properties": {
                "kty": "RSA",
                "keySize": 4096,
                "keyOps": [
                  "unwrapKey",
                  "wrapKey",
                  "decrypt",
                  "encrypt",
                  "verify",
                  "sign"
                ],
                "attributes": {
                  "enabled": true
                }
              },
              "tags": {
                "ZenTIA": "jamaltadrous"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/diskEncryptionSets",
              "apiVersion": "2021-08-01",
              "name": "dskEncrKeyV1",
              "location": "[parameters('location')]",
              "tags": {
                "ZenTIA": "jamaltadrous"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "rotationToLatestKeyVersionEnabled": true,
                "activeKey": {
                  "sourceVault": {
                    "id": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                  },
                  "keyUrl": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'RSAKey')).keyUriWithVersion]"
                },
                "encryptionType": "EncryptionAtRestWithCustomerKey"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'RSAKey')]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2021-10-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'add')]",
              "properties": {
                "accessPolicies": [
                  {
                    "tenantId": "[parameters('tenantId')]",
                    "objectId": "[reference(resourceId('Microsoft.Compute/diskEncryptionSets', 'dskEncrKeyV1'), '2021-08-01', 'full').identity.principalId]",
                    "permissions": {
                      "keys": [
                        "all"
                      ],
                      "secrets": [
                        "all"
                      ],
                      "certificates": [
                        "all"
                      ],
                      "storage": [
                        "all"
                      ]
                    }
                  },
                  {
                    "tenantId": "[parameters('tenantId')]",
                    "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'ZenTIAadmin')).principalId]",
                    "permissions": {
                      "keys": [
                        "all"
                      ],
                      "secrets": [
                        "all"
                      ],
                      "certificates": [
                        "all"
                      ],
                      "storage": [
                        "all"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/diskEncryptionSets', 'dskEncrKeyV1')]",
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'ZenTIAadmin')]"
              ]
            }
          ],
          "outputs": {
            "KEYVAULTName": {
              "type": "string",
              "value": "[parameters('keyVaultName')]"
            },
            "KeyvaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))).vaultUri]"
            },
            "mngId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'ZenTIAadmin')]"
            },
            "keyvaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "objectId": {
              "type": "string",
              "value": "[parameters('objectId')]"
            },
            "dskEncrKey": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/diskEncryptionSets', 'dskEncrKeyV1')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', parameters('resourceGroupName'))]"
      ]
    }
  ]
}